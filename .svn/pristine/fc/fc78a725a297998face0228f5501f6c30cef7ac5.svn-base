/*
 * TCSS 305 - Assignment 5: PowerPaint
 */
package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.GeneralPath;
import java.awt.geom.Path2D;
import java.util.ArrayList;

//import gui.Art;
import javax.swing.JPanel;



//import listenter.MyMouseListener;



/**
 * class that implements the JPanel.
 * 
 * @author Ben Russell
 * @version 11/5/2015
 */
public class PaintPanel extends JPanel {
    /** A generated serialization ID. */
    private static final long serialVersionUID = 810958738395164242L;    
    /** A size for the JPanel. */
    private static final Dimension PANEL_SIZE = new Dimension(400, 200);
    /** The line width. */
    private static final int LINE_WIDTH = 1;
    /** An object to represent that no point is assigned. */
    private static final Point NO_POINT = null;
    /** The current items on the panel. */
    private ArrayList<Point> myFinishedLines;
    /** The current items on the panel. */
    private ArrayList<Point> myFinishedCircles;
    /** The start point for the Shape. */
    private Point myStartPoint;
    
    /** The end point for the Shape. */
    private Point myEndPoint;
    /** The path being created. */
    private Path2D myPath;
    
    /** switches between lines and circles. */
    private boolean myCirclesIsSelected;
    /**
     * Constructor for the panel.
     */
    public PaintPanel() {
        super();
        setUpPanel();
    }
    private void setUpPanel() {
        setPreferredSize(PANEL_SIZE);
        setBackground(Color.WHITE);
        myCirclesIsSelected = false;
        myPath = new GeneralPath();
        myPath.setWindingRule(GeneralPath.WIND_EVEN_ODD);
        myFinishedLines = new ArrayList<Point>();
        myFinishedCircles = new ArrayList<Point>();
        final MouseAdapter mouseAdapter = new PaintPanelMouseAdapter();
        addMouseListener(mouseAdapter);
        addMouseMotionListener(mouseAdapter);
        
    }
    /**
     * Records the start point for a shape.
     * 
     * @param thePoint the start point of a shape.
     */
    public void recordStartPoint(final Point thePoint) {
        if (myCirclesIsSelected) {
            // make a defensive copy of the_point
            myFinishedCircles.add((Point) thePoint.clone());
            repaint();
        } else { // a line
            if (myEndPoint != null) { // starting a new line, so record the previous line
                myFinishedLines.add(myStartPoint);
                myFinishedLines.add(myEndPoint);
            }
            myStartPoint = thePoint;
            myEndPoint = NO_POINT; // still need to capture the end point
        }
    }
    /**
     * Records the current position of the mouse during a drag.
     * 
     * @param thePoint the end point of the shape
     */
    public void recordDragPoint(final Point thePoint) {
        if (!myCirclesIsSelected) {
            // make a defensive copy of the_point
            myEndPoint = (Point) thePoint.clone();
            repaint();
        }
    }

    /**
     * Signals the panel to draw Circles (instead of Lines).
     */
    public void drawCircles() {
        myCirclesIsSelected = true;
    }

    /**
     * Signals the panel to draw Lines (instead of Circles).
     */
    public void drawLines() {
        myCirclesIsSelected = false;
    }
    @Override
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        //myGraphics = (Graphics2D) myImage.getGraphics();
        //((Graphics2D) myGraphics).setRenderingHint(RenderingHints.KEY_ANTIALIASING
         //                                        , RenderingHints.VALUE_ANTIALIAS_ON);
// 
//        if (myImage == null) {
//            myImage = createImage(getSize().width, getSize().height);
//            myGraphics = (Graphics2D) myImage.getGraphics();
//            ((Graphics2D) myGraphics).setRenderingHint(RenderingHints.KEY_ANTIALIASING
//                                                       , RenderingHints.VALUE_ANTIALIAS_ON);
//            clear();
//        }
        final Graphics2D graphics = (Graphics2D) theGraphics;
        for (final Point p : myFinishedCircles) {
            graphics.drawOval(p.x, p.y, 50, 50);
        }
        for (int i = 0; i < myFinishedLines.size(); i += 2) {
            final Point p1 = myFinishedLines.get(i);
            final Point p2 = myFinishedLines.get(i + 1);
            graphics.drawLine(p1.x, p1.y, p2.x, p2.y);
        }
       
        
    }
    public class PaintPanelMouseAdapter extends MouseAdapter {

        @Override
        public void mousePressed(final MouseEvent theEvent) {
            recordStartPoint(theEvent.getPoint());
        }

        @Override
        public void mouseDragged(final MouseEvent theEvent) {
            recordDragPoint(theEvent.getPoint());
        }
    }
//    /** 
//     * method to clear old items from the panel.
//     */
//    public void clear() {
//        ((Graphics2D) myGraphics).setPaint(Color.white);
//        myGraphics.fillRect(0, 0, getSize().width, getSize().height);
//        ((Graphics2D) myGraphics).setPaint(Color.black);
//        repaint();
//    }
//    /**
//     * inner class for the mouse listener.
//     * 
//     * @author ben russell
//     */
//    private class MyMouseListener extends MouseAdapter {
//        @Override
//        public void mousePressed(final MouseEvent theEvent) {
//            myOldX = theEvent.getX();
//            myOldY = theEvent.getY();
//        }
//        @Override
//        public void mouseReleased(final MouseEvent theEvent) {
//            myCurrentX = theEvent.getX();
//            myCurrentY = theEvent.getY();
//            myGraphics.drawLine(myOldX, myOldY, myCurrentX, myCurrentY);
//            myFinishedLines.add(myStartPoint);
//            myFinishedLines.add(myEndPoint);
//            
//            for (int i = 0; i < myFinishedLines.size(); i += 2) {
//                final Point p1 = myFinishedLines.get(i);
//                final Point p2 = myFinishedLines.get(i + 1);
//                myGraphics.drawLine(p1.x, p1.y, p2.x, p2.y);
//            }
//            repaint();
//            myOldX = myCurrentX;
//            myOldY = myCurrentY;
//            
//        }
//
//    }
//    /**
//     * inner class for the mouse motion listener.
//     * 
//     * @author ben russell
//     */
//    private class MyMouseMotionListener extends MouseMotionAdapter {
//        @Override
//        public void mouseDragged(final MouseEvent theEvent) {
////            clear();
//            myCurrentX = theEvent.getX();
//            myCurrentY = theEvent.getY();
//            if (myGraphics != null) {
//                myGraphics.drawLine(myOldX, myOldY, myCurrentX, myCurrentY);
//            }
//            repaint();
//        }
//    }
public class CircleListener implements ActionListener {
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            drawCircles();
        }
    }

   
    public class LineListener implements ActionListener {
        
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            drawLines();
        }
    }

}
