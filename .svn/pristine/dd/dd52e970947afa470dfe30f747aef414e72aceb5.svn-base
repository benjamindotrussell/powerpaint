/**
 * 
 */
package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.List;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.awt.geom.Path2D;

import javax.swing.JPanel;

//import listenter.MyMouseListener;



/**
 * class that implements the JPanel.
 * 
 * @author Ben Russell
 * @version 11/5/2015
 */
public class PaintPanel extends JPanel {
    /** A generated serialization ID. */
    private static final long serialVersionUID = 810958738395164242L;    
    /** A size for the JPanel. */
    private static final Dimension PANEL_SIZE = new Dimension(400, 200);
//    /**
//     * The current items on the panel.
//     */
//    private final List<Art> myFinishedArt;
    /** The line width. */
    private static final int LINE_WIDTH = 1;
    /** The path being created. */
    private final Path2D myPath;
    /**
     * Constructor for the panel.
     */
    public PaintPanel() {
        super();
        setPreferredSize(PANEL_SIZE);
        setBackground(Color.WHITE);
        myPath = new GeneralPath();
        myPath.setWindingRule(GeneralPath.WIND_EVEN_ODD);
       // addMouseListener(new MyMouseListener());
    }
    
    @Override
    protected void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D graphics = (Graphics2D) theGraphics;
        
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        graphics.setPaint(Color.RED);
        graphics.setStroke(new BasicStroke(LINE_WIDTH));
        graphics.draw(myPath);
        
    }
    /**
     * Listens for mouse clicks, to draw on our panel.
     */
    private class MyMouseListener extends MouseAdapter {
        /**
         * Handles a click event.
         * 
         * @param theEvent The event.
         */
        @Override
        public void mouseClicked(final MouseEvent theEvent) {
            
            if (myPath.getCurrentPoint() == null) {
                myPath.moveTo(theEvent.getX(), theEvent.getY());
            } else if (theEvent.getClickCount() == 2) {
                myPath.closePath();
            } else {
                myPath.lineTo(theEvent.getX(), theEvent.getY());
            }
            repaint();
        }
    }
//    /**
//     * Removes all of the drawings on the panel.
//     */
//    public void clearPanel()
//    {
//      myFinishedDrawings.clear();
//      myHasCurrent = false;
//      repaint();
//    }
}
